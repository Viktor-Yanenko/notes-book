{"version":3,"file":"index.js","sources":["../src/js/refs.js","../src/js/local-storage-api.js","../src/js/tasks.js","../src/js/render-tasks.js","../src/main.js"],"sourcesContent":["const refs = {\r\n    body: document.body,\r\n    taskForm: document.querySelector('#task-form'),\r\n    taskList: document.querySelector('#task-list'),\r\n    inputTaskTitle: document.querySelector('input[name=\"taskName\"]'),\r\n    inputTaskDescription: document.querySelector('input[name=\"taskDescription\"]'),\r\n    themeToggleButton: document.querySelector('#themeToggle'),\r\n}\r\n\r\nexport default refs;","export const TASKS_KEY = 'tasks';\r\n\r\nexport function addDataToLocalStorage(value) {\r\n    const normalizedData = JSON.stringify(value);\r\n    localStorage.setItem(TASKS_KEY, normalizedData);\r\n}\r\n\r\nexport function getDataFromLocalStorage() {\r\n    const lsData = localStorage.getItem(TASKS_KEY);\r\n    return lsData ? JSON.parse(lsData) : [];\r\n}","import { addDataToLocalStorage, getDataFromLocalStorage } from \"./local-storage-api.js\";\r\n\r\nexport function createTask(title, description) {\r\n    const task = {\r\n        id: String(Math.floor(Math.random() * 10000)).padStart(4, 0),\r\n        title,\r\n        description,\r\n    };\r\n\r\n    const tasks = getDataFromLocalStorage();\r\n    tasks.push(task);\r\n    addDataToLocalStorage(tasks);\r\n\r\n    return task;\r\n}\r\n\r\nexport function deleteTask(id) {\r\n    const tasks = getDataFromLocalStorage();\r\n    const updatedTasks = tasks.filter(task => task.id != id);\r\n    addDataToLocalStorage(updatedTasks)\r\n}","import refs from './refs.js'\r\nimport { createTask, deleteTask } from './tasks.js';\r\nimport { getDataFromLocalStorage } from './local-storage-api.js';\r\n\r\n\r\nexport function renderTask(task) {\r\n    const markup = `\r\n    <li class=\"task-list-item\" data-id=\"${task.id}\">\r\n        <button class=\"task-list-item-btn\">Delete</button>\r\n        <h3>${task.title}</h3>\r\n        <p>${task.description}</p>\r\n      </li>`;\r\n    refs.taskList.insertAdjacentHTML('beforeend', markup)\r\n}\r\n\r\nexport function renderAllTasks() {\r\n    const tasks = getDataFromLocalStorage();\r\n    refs.taskList.innerHTML = '';\r\n    tasks.forEach(renderTask);\r\n}\r\n\r\nexport function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const title = refs.inputTaskTitle.value.trim();\r\n    const description = refs.inputTaskDescription.value.trim();\r\n    if (title === '' || description === '') {\r\n        alert('Please fill all input fields'); // need to add iziToast\r\n        return;\r\n    }\r\n\r\n    const newTask = createTask(title, description);\r\n    renderTask(newTask)\r\n    refs.taskForm.reset();\r\n}\r\n\r\n\r\nexport function handleDelete(event) {\r\n    if (event.target.classList.contains('task-list-item-btn')) {\r\n        const card = event.target.closest('.task-list-item');\r\n        const id = card.dataset.id;\r\n        deleteTask(id);\r\n        card.remove();\r\n    }\r\n}","/*\n  Створи список справ.\n  На сторінці є два інпути які має вводиться назва і текст задачі.\n  Після натискання на кнопку \"Add\" завдання додається до списку #task-list.\n\n  У кожної картки має бути кнопка \"Delete\", щоб можна було\n  прибрати завдання зі списку.\n  Список із завданнями має бути доступним після перезавантаження сторінки.\n\n  Розмітка картки задачі\n  <li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\">Delete</button>\n      <h3>Заголовок</h3>\n      <p>Текст</p>\n  </li>\n*/\n\nimport { handleSubmit, handleDelete, renderAllTasks } from \"./js/render-tasks.js\";\nimport refs from './js/refs.js'\n\ndocument.addEventListener('DOMContentLoaded', renderAllTasks);\nrefs.taskForm.addEventListener('submit', handleSubmit);\nrefs.taskList.addEventListener('click', handleDelete)"],"names":["refs","TASKS_KEY","addDataToLocalStorage","value","normalizedData","getDataFromLocalStorage","lsData","createTask","title","description","task","tasks","deleteTask","id","updatedTasks","renderTask","markup","renderAllTasks","handleSubmit","event","newTask","handleDelete","card"],"mappings":"ssBAAA,MAAMA,EAAO,CACT,KAAM,SAAS,KACf,SAAU,SAAS,cAAc,YAAY,EAC7C,SAAU,SAAS,cAAc,YAAY,EAC7C,eAAgB,SAAS,cAAc,wBAAwB,EAC/D,qBAAsB,SAAS,cAAc,+BAA+B,EAC5E,kBAAmB,SAAS,cAAc,cAAc,CAC5D,ECPaC,EAAY,QAElB,SAASC,EAAsBC,EAAO,CACzC,MAAMC,EAAiB,KAAK,UAAUD,CAAK,EAC3C,aAAa,QAAQF,EAAWG,CAAc,CAClD,CAEO,SAASC,GAA0B,CACtC,MAAMC,EAAS,aAAa,QAAQL,CAAS,EAC7C,OAAOK,EAAS,KAAK,MAAMA,CAAM,EAAI,CAAA,CACzC,CCRO,SAASC,EAAWC,EAAOC,EAAa,CAC3C,MAAMC,EAAO,CACT,GAAI,OAAO,KAAK,MAAM,KAAK,SAAW,GAAK,CAAC,EAAE,SAAS,EAAG,CAAC,EAC3D,MAAAF,EACA,YAAAC,CACR,EAEUE,EAAQN,IACd,OAAAM,EAAM,KAAKD,CAAI,EACfR,EAAsBS,CAAK,EAEpBD,CACX,CAEO,SAASE,EAAWC,EAAI,CAE3B,MAAMC,EADQT,IACa,OAAOK,GAAQA,EAAK,IAAMG,CAAE,EACvDX,EAAsBY,CAAY,CACtC,CCfO,SAASC,EAAWL,EAAM,CAC7B,MAAMM,EAAS;AAAA,0CACuBN,EAAK,EAAE;AAAA;AAAA,cAEnCA,EAAK,KAAK;AAAA,aACXA,EAAK,WAAW;AAAA,aAEzBV,EAAK,SAAS,mBAAmB,YAAagB,CAAM,CACxD,CAEO,SAASC,GAAiB,CAC7B,MAAMN,EAAQN,IACdL,EAAK,SAAS,UAAY,GAC1BW,EAAM,QAAQI,CAAU,CAC5B,CAEO,SAASG,EAAaC,EAAO,CAChCA,EAAM,eAAc,EACpB,MAAMX,EAAQR,EAAK,eAAe,MAAM,KAAI,EACtCS,EAAcT,EAAK,qBAAqB,MAAM,KAAI,EACxD,GAAIQ,IAAU,IAAMC,IAAgB,GAAI,CACpC,MAAM,8BAA8B,EACpC,MACH,CAED,MAAMW,EAAUb,EAAWC,EAAOC,CAAW,EAC7CM,EAAWK,CAAO,EAClBpB,EAAK,SAAS,OAClB,CAGO,SAASqB,EAAaF,EAAO,CAChC,GAAIA,EAAM,OAAO,UAAU,SAAS,oBAAoB,EAAG,CACvD,MAAMG,EAAOH,EAAM,OAAO,QAAQ,iBAAiB,EAC7CN,EAAKS,EAAK,QAAQ,GACxBV,EAAWC,CAAE,EACbS,EAAK,OAAM,CACd,CACL,CCvBA,SAAS,iBAAiB,mBAAoBL,CAAc,EAC5DjB,EAAK,SAAS,iBAAiB,SAAUkB,CAAY,EACrDlB,EAAK,SAAS,iBAAiB,QAASqB,CAAY"}